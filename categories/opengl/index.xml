<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>OpenGL on Niiok's Blog</title><link>https://niiok.github.io/categories/opengl/</link><description>Recent content in OpenGL on Niiok's Blog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 01 Jan 1970 00:00:00 +0000</lastBuildDate><atom:link href="https://niiok.github.io/categories/opengl/index.xml" rel="self" type="application/rss+xml"/><item><title>OpenGL basic</title><link>https://niiok.github.io/opengl/opengl_basic/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://niiok.github.io/opengl/opengl_basic/</guid><description>Function Buffer glClearBuffer 1 void glClearBufferfv (GLenum buffer, GLint drawBuffer, const GLfloat *value); clear buffer of drawBuffer with value
_drawBuffer_의 _buffer_를 _value_로 지운다. -- Shader &amp;amp; Program object manage glCreateShader 1 GLuint glCreateShader (GLenum type); create type of shader(structure that manage shader code compile and linking it) and return GLuint as identifier.
glShaderSource 1 void glShaderSource (GLuint shader, GLsizei count, const GLchar* const *string, const GLint *length); will add more explains</description></item><item><title>OpenGL data</title><link>https://niiok.github.io/opengl/opengl_data/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://niiok.github.io/opengl/opengl_data/</guid><description>OpenGL Data type OpenGL provides Buffer and Texture as storage for more efficient data streaming. (modern graphics processors are designed with streaming processor.)
Buffer
glBindBuffer() glBufferData() glBufferSubData() glClearBufferSubData() glCopyBufferSubData() glGenBuffers() glMapBuffer() &amp;lt;&amp;ndash; - glCreateBuffers &amp;ndash;&amp;gt; Vertex Attribute
glVertexAttribPointer() glEnableVertexAttribArray() glDisableVertexAttribArray() glGetAttribLocation() Uniform
Default Block glUniform*() glUniformMatrix*() Uniform Block glGetUniformIndicies() glGetActiveUniforms() glGetUniformLocation() Buffer need name for identify handle</description></item></channel></rss>