<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Niiok's Blog</title><link>https://niiok.github.io/</link><description>Recent content on Niiok's Blog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 17 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://niiok.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Unreal Network</title><link>https://niiok.github.io/unreal/network/</link><pubDate>Tue, 17 May 2022 00:00:00 +0000</pubDate><guid>https://niiok.github.io/unreal/network/</guid><description>Intro Unreal network system is based on Server-Client model. If developers consider about &amp;ldquo;Replication&amp;rdquo;, game can support both singleplayer and multiplayer. UE4 Clients can not communicate without Server (p2p is not currently supported) Struct Network Mode ENetMode NM_Standalone Authoritative : true Listening : false LocalPlayer : true NM_DedicatedServer Authoritative : true Listening : true LocalPlayer : false NM_ListenServer Authoritative : true Listening : true LocalPlayer : true NM_Client Authoritative : false Listening : false LocalPlayer : true NM_MAX Role, RemoteRole ENetRole ROLE_None not related with replication ROLE_SimulatedProxy copy of ROLE_Authority extrapolative-predicted with server values ROLE_AutonomousProxy copy of ROLE_Authority extrapolative-predicted with server values + local functions (e.</description></item><item><title>Unreal Kickstart - Rendering</title><link>https://niiok.github.io/unreal/sjoerddejong/kickstart_rendering/</link><pubDate>Tue, 26 Apr 2022 17:40:24 +0900</pubDate><guid>https://niiok.github.io/unreal/sjoerddejong/kickstart_rendering/</guid><description>Intro and Philosophy History rendering has always been focus point best visual at the best performance all-compatible set of tools for any renderer or platform UE1 (1997) blended colored light dynamic, static light volumetric light, lensflare, perfect mirrors, procedural texture effects 1k, 2k supported, detailed texture in 256mb memory UE2 (2002) DirectX 7 support mesh, terrains, larger outdoor environments, vehicles foliage and particle basic material vertex lighting UE3 (2006) DirectX 9 support forward rendering even larger outdoor environments full lightmapping, dynamic shadows UE4 (2014) handle any style (not only high realism) scalabiliy, from indipendable to AAA over game egine better fidelity, architecture, pipeline, flexibility UE5 (2022) Nanite Lumen Niagara Schematic Schematic Ahead of Rendering Visibility Features Start of Rendering BasePass BasePass Material Geometry Precomputed Lighting GBuffer Dynamic Light &amp;amp; Shadow Reflections Additional Translucency Atmospherics Etc Post Processing Final Frame Scalability and Performance Schematic Overview Full size (4MB)</description></item><item><title>Unreal Kickstart - World Building</title><link>https://niiok.github.io/unreal/sjoerddejong/kickstart_world/</link><pubDate>Mon, 25 Apr 2022 16:31:05 +0900</pubDate><guid>https://niiok.github.io/unreal/sjoerddejong/kickstart_world/</guid><description>Intro and Philosophy History visual based complete toolset level centric started from level editor other tools added-on level editor, and then it called as engine UE1 (1997/1999) Called as UnrealEd1, UnrealEd2 BSP Brush focused Engine struct was formulated Actors, Viewport, Camera controls, toolbar&amp;hellip; Lighting rendered in viewport Event/Tag scripted Subtractive world (Skybox) UE2 (2002) Meshes added BSP-Mesh hybrid workflow Event/Tag scripted Subtractive world (Skybox) used Ctrl+S to subtract (prevent spam) UE3 (2006) Visual scripting (Kismet) added sub-editors added Matinee, Cascade, Material editor, etc Additive world (no Skybox) UE4&amp;rsquo;s structure was almost completed UE4 (2014) Blueprint added UI revamp 2nd generation sub-editors and tools Matinee and Cascade are replaced Sequencer, Sound cue editor, etc Unified interface with blueprint UE5 (2022) Reinforced sub-editors and open world support Chaos, AFPA, World Partition, etc Schematic-Schematic All required tools and sub-editors are part of the editor and engine.</description></item><item><title>Unreal Kickstart</title><link>https://niiok.github.io/unreal/sjoerddejong/kickstart/</link><pubDate>Sun, 24 Apr 2022 14:25:00 +0900</pubDate><guid>https://niiok.github.io/unreal/sjoerddejong/kickstart/</guid><description>About this kickstart Kickstart for giving Big picture perspective of UE4 Not a step-by-step walkthrough of how to use UE4 about what, why, terminology, logic, history plus advices and practises for beginners Composed with Philosophy and Intro Schematic Overview Advice Presenters Sjoerd De Jong Evangelism Lead Europe 20 Years experience with UE1-4 Anything content or Blueprint related except for Animation/Audio Mario Palmero 8 hours years experience with UE3-4 Programming, Tech Art and Animation Contents World Building Rendering Animation Engine Structure Programming Blueprint Character Material</description></item><item><title>UE5 New Features</title><link>https://niiok.github.io/unreal/ue5_new/</link><pubDate>Wed, 13 Apr 2022 18:16:26 +0900</pubDate><guid>https://niiok.github.io/unreal/ue5_new/</guid><description>Core Nanite Lumen Open World File per Actor World Partition Data Layer Level Instance Large World Coordinate</description></item><item><title>Unreal Subsystem</title><link>https://niiok.github.io/unreal/subsystem/</link><pubDate>Thu, 17 Mar 2022 23:42:05 +0900</pubDate><guid>https://niiok.github.io/unreal/subsystem/</guid><description>Intro Subsystem is handy and useful instance with various lifecycle. Every Subsystems declared as class will be instanced and called Inintialize() and Deinitialize() in proper time. Thanks to Subsystems, GameInstance don&amp;rsquo;t have to be over-responsible. (and other massive advantages) Subsystem variety UEngineSubsystem
Lifetime : StartUp() ~ ShutDown() Reference : GEngine-&amp;gt;GetEngineSubsystem&amp;lt;T&amp;gt;(); UEditorSubsystem
Lifetime : StartUp() ~ ShutDown() Reference : GEditor-&amp;gt;GetEditorSubsystem&amp;lt;T&amp;gt;(); UGameInstanceSubsystem</description></item><item><title>Android packaging</title><link>https://niiok.github.io/unreal/android_packaging/</link><pubDate>Mon, 14 Mar 2022 13:07:15 +0900</pubDate><guid>https://niiok.github.io/unreal/android_packaging/</guid><description>To package apk successfully via Android Studio (UE4.25~) First, follow this official document. Tips below may be useful if your Gradle spit errors out. (wrote in 2022 March with UE4.27.2) Check existence of these 2 files (Windows) Users/[User name]/AppData\Local\Android\Sdk\build-tools\[SDK version]/dx.bat Users/[User name]/AppData\Local\Android\Sdk\build-tools\[SDK version]/lib/dx.jar If they don&amp;rsquo;t exist, make symbolic links of d8.bat and d8.jar. You MUST enable AndroidDeviceProfileSelector and AndroidPermission plugins. Then execute [EngineFolder]/Engine/Extras/Android/SetupAndroid.* while UE4 and Android Studio are off.</description></item><item><title>Array String</title><link>https://niiok.github.io/c/array_string/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://niiok.github.io/c/array_string/</guid><description> strlen() 1 2 3 4 5 6 7 8 9 int strlen (char s[]) { int i; i = 0; while ( s[i] != &amp;#39;\0&amp;#39; ) ++i; return i; } memset() 1 void* memset(char s[], char c, int n); place character c into first n characters of s, return s.</description></item><item><title>Cpp Naming rule</title><link>https://niiok.github.io/cpp/naming/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://niiok.github.io/cpp/naming/</guid><description>File name fully lower-case word separation expressed as _ (underscore) 1 2 file_name.txt very_good_source_code.c Type name start with capital letter next letters are lower-case word separation expressed as upper-cased first letter 1 2 class SuperDuperClass{}; struct TypeNameExpressedLikeThis{}; Variable name function parameters are included in variable
Common variable name
fully lower-case space expressed into _ (underscore) 1 2 int integer_variable = 4; int quantity_of_cookies = 0; Class data member name</description></item><item><title>CWnd</title><link>https://niiok.github.io/windows/cwnd/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://niiok.github.io/windows/cwnd/</guid><description>CWnd (Window Support)
CFrameWnd (Frame Windows) CMDIChildWnd (user MDI windows) CMDIFrameWnd (user MDI workspaces) CMiniFrameWnd (user SDI windows) COleIPFrameWnd CSplitterWnd CControlBar (Control Bars) CDialogBar COleResizeBar CReBar CStatusBar CToolBar CPropertySheet (Property Sheets) CDialog (Dialog Boxes) CCommonDialog CColorDialog CFileDialog CFindReplaceDialog CFontDialog COleDialog COleBusyDialog COleChangeIconDialog COleChangeSourceDialog COleConvertDialog COleInsertDialog COleLinksDialog COleUpdateDialog COlePasteSpecialDialog COlePropertiesDialog CPageSetupDialog CPrintDialog CPrintDialogEx COlePropertyPage CPropertyPage (user dialog boxes) CDHtmlDialog CMultiPageDHtmlDialog CView (Views) CCtrlView CEditView CListView CRichEditView CTreeView CScrollView (user scroll views) CFormView (user form views) CDaoRecordView CHtmlEditView CHtmlView COleDBRecordView CRecordView (user record views) (Controls)</description></item><item><title>File</title><link>https://niiok.github.io/c/file/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://niiok.github.io/c/file/</guid><description>FILE
fopen
1 FILE* fopen (char* name, char* mode); used to openning file with file name name.
mode
&amp;ldquo;r&amp;rdquo; : read &amp;ldquo;w&amp;rdquo; : write (will be overwrited), (make new file if it doesn&amp;rsquo;t exist and possible) &amp;ldquo;a&amp;rdquo; : append (make new file if it doesn&amp;rsquo;t exist and possible) &amp;ldquo;rb&amp;rdquo; : binary-read &amp;ldquo;wb&amp;rdquo; : binary-write (will be overwrited), (make new file if it doesn&amp;rsquo;t exist and possible) &amp;ldquo;ab&amp;rdquo; : binary-append (make new file if it doesn&amp;rsquo;t exist and possible) getc</description></item><item><title>Intro</title><link>https://niiok.github.io/c/intro/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://niiok.github.io/c/intro/</guid><description>Introduction Writer prefer 1983 ANSI C (K&amp;amp;R 2nd). C was born for UNIX
C is machine independent C is simple and concise (even though program with it is complicated) Creator&amp;rsquo;s words
C is a general-purpose programming language which features economy of expression, modern control flow and data structures, and a rich set of operators.
C wears well as one&amp;rsquo;s experience with it grows.</description></item><item><title>MFC</title><link>https://niiok.github.io/windows/mfc/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://niiok.github.io/windows/mfc/</guid><description>MFC is Microsoft Foundation Class.
composed with combination of Win32 api and class (object-oriented)
MFC is almost depricated by many alternatives like .net WPF and other crossplatform GUI libraries
declare field HWnd inside header file to create child windows
you need to call Create() method of them to replace CreateWindow() of win32 since MFC works as OOP wrapper of win32, message dealing system how win32 do with CALLBACK function is replaced by MessageMap macro inside HWnd</description></item><item><title>MFC classes</title><link>https://niiok.github.io/windows/mfc_class/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://niiok.github.io/windows/mfc_class/</guid><description>CObject CCmdTarget CWinThread CWinApp CDocumen CDocTemPlate CSingleDocTemplace CMultiDocTemplatet CWnd (Window Support) CFrameWnd (Frame Windows) CMDIChildWnd (user MDI windows) CMDIFrameWnd (user MDI workspaces) CMiniFrameWnd (user SDI windows) COleIPFrameWnd CSplitterWnd CControlBar (Control Bars) CDialogBar COleResizeBar CReBar CStatusBar CToolBar CPropertySheet (Property Sheets) CDialog (Dialog Boxes) CCommonDialog CColorDialog CFileDialog CFindReplaceDialog CFontDialog COleDialog COleBusyDialog COleChangeIconDialog COleChangeSourceDialog COleConvertDialog COleInsertDialog COleLinksDialog COleUpdateDialog COlePasteSpecialDialog COlePropertiesDialog CPageSetupDialog CPrintDialog CPrintDialogEx COlePropertyPage CPropertyPage (user dialog boxes) CDHtmlDialog CMultiPageDHtmlDialog CView (Views) CCtrlView CEditView CListView CRichEditView CTreeView CScrollView (user scroll views) CFormView (user form views) CDaoRecordView CHtmlEditView CHtmlView COleDBRecordView CRecordView (user record views) (Controls) CAnimateCtrl CComboBox CDateTimeCtrl CEdit CHeaderCtrl CHtmlEditCtrl CHotKeyCtrl CIPAdressCtrl CLinkCtrl CListBox CListCtrl CMonthCalCtrl COleControl CProgressCtrl CReBarCtrl CRichEditCtrl CScrollBar CSliderCtrl CSpinButtonCtrl CStatic CStatusBarCtrl CTabCtrl CToolBarCtrl CToolTipCtrl CTreeCtrl CDC CClientDC CMetaFileDC CPaintDC CWindowDC CGdiObject CBitMap CBrush CFont CPalette CPen CRgn CFile CMemFile CShareFile COleStreamFile CMonikerFile CAsyncMonikerFile CDataPathProperty CCachedDataPathProperty CSocketFile CStdioFile CInternetFile CGopherFile CHttpFile CRecentFileList (Arrays) CArray (template) CByteArray CDWordArray CObArray CPtrArray CStringArray CUIntArray CWordArray (arrays of user types) (Lists) CList (template) CPtrList CObList CStringList (lists of user types) (Maps) CMap (template) CMapWordToPtr CMapPtrToWord CMapPtrToPtr CMapWordToOb CMapStringToPtr CMapStrngToOb CMapStringToString CPoint CRect composed with 4 integers first 2 are x and y of left top vertex last 2 are x and y of right bottom vertex -CSize -CString</description></item><item><title>OpenGL basic</title><link>https://niiok.github.io/opengl/opengl_basic/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://niiok.github.io/opengl/opengl_basic/</guid><description>Function Buffer glClearBuffer 1 void glClearBufferfv (GLenum buffer, GLint drawBuffer, const GLfloat *value); clear buffer of drawBuffer with value
_drawBuffer_의 _buffer_를 _value_로 지운다. -- Shader &amp;amp; Program object manage glCreateShader 1 GLuint glCreateShader (GLenum type); create type of shader(structure that manage shader code compile and linking it) and return GLuint as identifier.
glShaderSource 1 void glShaderSource (GLuint shader, GLsizei count, const GLchar* const *string, const GLint *length); will add more explains</description></item><item><title>OpenGL data</title><link>https://niiok.github.io/opengl/opengl_data/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://niiok.github.io/opengl/opengl_data/</guid><description>OpenGL Data type OpenGL provides Buffer and Texture as storage for more efficient data streaming. (modern graphics processors are designed with streaming processor.)
Buffer
glBindBuffer() glBufferData() glBufferSubData() glClearBufferSubData() glCopyBufferSubData() glGenBuffers() glMapBuffer() &amp;lt;&amp;ndash; - glCreateBuffers &amp;ndash;&amp;gt; Vertex Attribute
glVertexAttribPointer() glEnableVertexAttribArray() glDisableVertexAttribArray() glGetAttribLocation() Uniform
Default Block glUniform*() glUniformMatrix*() Uniform Block glGetUniformIndicies() glGetActiveUniforms() glGetUniformLocation() Buffer need name for identify handle</description></item><item><title>SDL Chapter 1</title><link>https://niiok.github.io/sdl/lazyfoo1/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://niiok.github.io/sdl/lazyfoo1/</guid><description>Intro How Chapter 1 works? Init SDL with SDL_Init(). Create window with SDL_CreateWindow(). Get surface with SDL_GetWindowSurface(). do something with surface. (like SDL_FillRect()). Update surface with SDL_UpdateWindowSurface(). you can delay loop( for window lasting) with SDL_Delay(). If you done all your jobs with SDL, Destroy window with SDL_DestroyWindow(). Don&amp;rsquo;t forget calling SDL_Quit() for terminating all jobs! SDL.h main header file for sdl.</description></item><item><title>SDL Chapter 2</title><link>https://niiok.github.io/sdl/lazyfoo2/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://niiok.github.io/sdl/lazyfoo2/</guid><description>Intro How Chapter 2 works? Init() SDL_Init() SDL_CreateWindow() SDL_GetWindowSurface() loadMedia() SDL_LoadBMP() copy image(Blit) into surface with SDL_BlitSurface(). update window with SDL_UpdateWindowSurface() to refresh and show what we&amp;rsquo;ve done. you can delay loop( for window lasting) with SDL_Delay(). close() SDL_FreeSurface() SDL_DestroyWindow() SDL_Quit() Function SDL_LoadBMP() 1 SDL_Surface* SDL_LoadBMP( const char* file ); param file : the file containing a BMP image return surface that contain BMP on success NULL on failure Gets SDL_Surface object from BMP file and returns its address.</description></item><item><title>SDL Chapter 3</title><link>https://niiok.github.io/sdl/lazyfoo3/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://niiok.github.io/sdl/lazyfoo3/</guid><description>Intro How Chapter 3 works? Init() SDL_Init() SDL_CreateWindow() SDL_GetWindowSurface() loadMedia() SDL_LoadBMP() start loop untill variable quit is true. start loop that calls SDL_PollEvent() untill it returns 0. if SDL_Event.type is SDL_QUIT, quit is true( which means first loop will end). copy screen(Blit) with SDL_BlitSurface(). update window with SDL_UpdateWindowSurface() to refresh and show what we&amp;rsquo;ve done. close() SDL_FreeSurface() SDL_DestroyWindow() SDL_Quit() Function SDL_PollEvent() 1 int SDL_PollEvent( SDL_Event* event ); param event : the SDL_Event structure to be filled with the next event from the queue, or NULL return 1 if queue contains any event inside 0 if there&amp;rsquo;s no event in queue when this function called, event at head will be removed from queue and stored to event.</description></item><item><title>SDL Chapter 4</title><link>https://niiok.github.io/sdl/lazyfoo4/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://niiok.github.io/sdl/lazyfoo4/</guid><description>Intro How Chapter 4 works? init() SDL_Init() SDL_CreateWindow() SDL_GetWindowSurface() loadMedia() put surfaces in SDL_Surface* array( is global variable) with SDL_LoadBMP(). start loop untill variable quit is true. start loop that calls SDL_PollEvent() untill it returns 0. if SDL_Event.type is SDL_QUIT, quit is true( which means first loop will end). else if SDL_Event.type is SDL_KEYDOWN, choose mapped sruface to key inside SDL_Surface* array( is global variable).</description></item><item><title>SDL Chapter 5</title><link>https://niiok.github.io/sdl/lazyfoo5/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://niiok.github.io/sdl/lazyfoo5/</guid><description>Intro How Chapter 5 works? init() SDL_Init() SDL_CreateWindow() SDL_GetWindowSurface() loadMedia() loadSurface() load BMP file on intermediate surface with SDL_LoadBMP(). optimize loaded intermediate surface into optimized surface with SDL_ConvertSurface(). free memory of intermediate surface with SDL_FreeSurface(). start loop untill variable quit is true. start loop that calls SDL_PollEvent() untill it returns 0. if SDL_Event.type is SDL_QUIT, quit is true( which means first loop will end).</description></item><item><title>SDL Chapter 6</title><link>https://niiok.github.io/sdl/lazyfoo6/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://niiok.github.io/sdl/lazyfoo6/</guid><description>Intro How Chapter 6 works? init() SDL_Init() SDL_CreateWindow() IMG_Init() SDL_GetWindowSurface() loadMedia() loadSurface() load PNG file on intermediate surface with IMG_Load(). optimize loaded intermediate surface into optimized surface with SDL_ConvertSurface(). free memory of intermediate surface with SDL_FreeSurface(). start loop untill variable quit is true. start loop that calls SDL_PollEvent() untill it returns 0. if SDL_Event.type is SDL_QUIT, quit is true( which means first loop will end).</description></item><item><title>SDL Chapter 7</title><link>https://niiok.github.io/sdl/lazyfoo7/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://niiok.github.io/sdl/lazyfoo7/</guid><description>This document is not done. On Going!! Intro How Chapter 7 works? init() SDL_Init() SDL_SetHint() SDL_CreateWindow() SDL_CreateRenderer() SDL_SetRenderDrawColor() IMG_Init() loadMedia() loadTexture() load PNG file on intermediate surface with IMG_Load(). create texture from loaded surface with SDL_CreateTextureFromSurface(). free memory of intermediate surface with SDL_FreeSurface(). start loop untill variable quit is true. start loop that calls SDL_PollEvent() untill it returns 0.</description></item><item><title>Statistics basic</title><link>https://niiok.github.io/statistics/basic/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://niiok.github.io/statistics/basic/</guid><description>purpose (to find-out)
phenomenon (group characteristics) reason-result (relationship of factotrs) economic, social tendencies(, rules) used for predicting future, and helping decision how
survey experiment observation terms
unit person state food &amp;hellip; case (record) variable level of measurement (scale of measure)
nominal scale : identifying use ordinal scale : serial ordering use interval scale : scoring use ratio scale : ratio use data</description></item><item><title>Unreal basic</title><link>https://niiok.github.io/unreal/basic/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://niiok.github.io/unreal/basic/</guid><description>Unreal project If you want to study the API on your own; You should use that API as a user until you get used to it and read the header files. In every unreal code, they include &amp;ldquo;CoreMinimal.h&amp;rdquo; or &amp;ldquo;EngineMinimal.h&amp;rdquo; and those header files will be key to start studying.
Project hierarchy Config : project setting values. NEEDED-do not remove
Content : asset storage. NEEDED-do not remove</description></item><item><title>Visual studio</title><link>https://niiok.github.io/windows/visual_studio/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://niiok.github.io/windows/visual_studio/</guid><description>file extentions .sln : solution file .suo : options of solution file .vcxproj : project file .sdf : compact SQL SERVER DATABASE that support browsing and navigation .vcsproj.filters : filter file that indicates file location of solution .vcxproj.user : lower-version-to-higher-version migration user file .ncb : symbol cache before compile .ilk : intermediate link data .aps : MFS resource cache .def : module definition file (serves linking informations to linker) .</description></item><item><title>Win32</title><link>https://niiok.github.io/windows/win32/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://niiok.github.io/windows/win32/</guid><description>event driven
when events happen, they stored into message form message stored into system queue OS was checking for system queue OS send message to aplication&amp;rsquo;s thread message queue application was checking for thread message queue (GetMessage) application calls event-matching callback function (TranslateMessage, DispatchMessage) creating window
declare WNDCLASS object declare proper LRESULT CALLBACK (*callback_function) (HWND, UINT, WPARAM, LPARAM) change fields(properties) inside WNDCLASS object you need to set ipfnWndProc into callback_function as window processor you need to set lpszClassName into LPCSTR type string as window class name declare WNDCLASS object with RegisterClass() Create window with CreateWindow() you need to call ShowWindow() if window is invisible window programming</description></item><item><title>Windows control</title><link>https://niiok.github.io/windows/control/</link><pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate><guid>https://niiok.github.io/windows/control/</guid><description>controls are useful preset of child window
but control is little different with normal child window control doesn&amp;rsquo;t need class registing control send message(WM_COMMAND) to its parent window&amp;rsquo;s callback function (window processor) send WM_COMMAND to parent window
control gives parameters with wParam and lParam wParam 4 bytes first 2 bytes contains Notify code, notifying what kind of message control made can get with HIWORD(wParam) last 2 bytes contains control&amp;rsquo;s ID can get with LOWORD(wParam) lParam control&amp;rsquo;s handle controls</description></item></channel></rss>